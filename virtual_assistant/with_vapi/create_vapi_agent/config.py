from typing import Any, Callable, Dict, List, Optional

import requests
from hs_prompts.custom_functions import function_tools_map
from hs_prompts.prompt import Prompt


def get_prompt(
    bot_name: Optional[str],
    role_use_case: Optional[str],
    custom_functions_list: List[str],
    custom_template: Optional[str] = None,
) -> str:
    """Generate a GPT prompt template and a list of tools configurations based on the provided bot name, role use case,
    and custom functions list.

    Args:
        bot_name (Optional[str]): The name of the bot. Defaults to "Ava".
        role_use_case (Optional[str]): The role and use case of the bot. Defaults to "support".
        custom_functions_list (List[str]): A list of custom functions to include in the prompt template.
        custom_template (Optional[str]): A custom prompt template to use instead of the default one.

    Returns:
        Tuple[str, List]: A tuple containing the generated GPT prompt template and a list of tools configurations.

    Notes:
        - The GPT prompt template is generated by concatenating the default prompt template or custom prompt provided with the templates of the
          custom functions.
        - The tools configurations are generated by calling the `tool_config` method of each custom function.
        - If a custom function is not found in the `function_tools_map` dictionary, it is skipped and not included in
          the prompt template or the tools configurations.
    """
    bot_name = bot_name or "Ava"
    role_use_case = role_use_case or "support"
    prompt_class: Prompt = Prompt(bot_name, role_use_case)
    prompt_template = custom_template or prompt_class.default_template
    for index, function in enumerate(custom_functions_list):
        try:
            function_object: Callable = function_tools_map[function]()
        except KeyError:
            continue
        else:
            prompt_template += f"[FUNCTION {index + 1}] - {function}\n{function_object.template}"
    return prompt_template


def make_vapi_tools(call_forwarding_number: str) -> List[Dict[str, Any]]:
    """Generate a list of tools configurations for the Voice API assistant.

    Args:
        call_forwarding_number (str): The call forwarding number to use for the assistant.

    Returns:
        List[str]: A list of tools configurations for the Voice API assistant.
    """
    return [
        {
            "async": False,
            "type": "transferCall",
            "destinations": [
                {
                    "type": "number",
                    "numberE164CheckEnabled": True,
                    "number": call_forwarding_number,
                    "message": "I am forwarding your call, Please stay on the line.",
                    "description": "Use this function to transfer the call. Only use it when following instructions that explicitly ask you to use the transferCall function. DO NOT call this function unless you are instructed to do so.",
                }
            ],
            "function": {
                "name": "transferCall",
                "description": "Use this function to transfer the call. Only use it when following instructions that explicitly ask you to use the transferCall function. DO NOT call this function unless you are instructed to do so.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "destination": {
                            "type": "string",
                            "enum": [call_forwarding_number],
                            "description": "The destination to transfer the call to.",
                        }
                    },
                    "required": ["destination"],
                },
            },
        }
    ]
